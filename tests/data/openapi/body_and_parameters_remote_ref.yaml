openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
  description: |
    This description is for testing
    multi-line
    description

servers:
  - url: http://petstore.swagger.io/v1
security:
  - BearerAuth: []
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      security: []
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            default: 0
            type: integer
            format: int32
        - name: HomeAddress
          in: query
          required: false
          schema:
            default: 'Unknown'
            type: string
        - name: kind
          in: query
          required: false
          schema:
            default: dog
            type: string
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                 - $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      tags:
        - pets
      requestBody:
        $ref: 'https://schema.example#/components/requestBodies/Pet'
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      summary: update a pet
      tags:
        - pets
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: 'https://schema.example#/components/schemas/PetForm'
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    x-amazon-apigateway-integration:
      uri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
  /food:
    post:
      summary: Create a food
      tags:
        - pets
      requestBody:
        required: true
        content:
          application/problem+json:
            schema:
              type: string
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/problem+json:
              schema:
                type: string
  /food/{food_id}:
    get:
      summary: Info for a specific pet
      operationId: showFoodById
      tags:
        - foods
      parameters:
        - name: food_id
          in: path
          description: The id of the food to retrieve
          schema:
            type: string
        - name: message_texts
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
              examples:
                example-1:
                  value:
                    - 0
                    - 1
                    - 3
    x-amazon-apigateway-integration:
      uri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
  /foo:
    get:
      tags:
        - foo
      responses:
        200:
          $ref: 'https://schema.example#/components/responses/OK'
    parameters:
      - $ref: 'https://schema.example#/components/parameters/MyParam'
components:
  parameters:
    MyParam:
      name: foo
      in: query
      schema:
        type: string
  responses:
    OK:
      description: OK
      content:
        application/json:
          schema:
            type: string
  requestBodies:
    Pet:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PetForm'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    PetForm:
      title: PetForm
      type: object
      properties:
        name:
          type: string
        age:
          type: integer