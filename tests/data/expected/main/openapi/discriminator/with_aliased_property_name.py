# generated by datamodel-codegen:
#   filename:  discriminator_with_aliased_property_name.yaml
#   timestamp: 2019-07-26T00:00:00+00:00

from __future__ import annotations

from typing import Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class BaseOption(BaseModel):
    id: str = Field(..., description='...')
    field_type: str = Field(..., alias='@type', description='This schema does not re-declare the @type property')


class OptionOne(BaseOption):
    field_type: Literal['OptionOne'] = Field(..., alias='@type')


class OptionTwo(BaseOption):
    abc: Optional[str] = Field(None, description='...')
    field_type: Literal['OptionTwo'] = Field(
        ..., alias='@type', description='This schema does re-declare the @type property'
    )


class OptionOneOrOptionTwo(RootModel[Union[OptionOne, OptionTwo]]):
    root: Union[OptionOne, OptionTwo] = Field(
        ..., description='...', discriminator='field_type'
    )
