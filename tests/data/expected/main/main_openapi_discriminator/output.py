# generated by datamodel-codegen:
#   filename:  discriminator.yaml
#   timestamp: 2019-07-26T00:00:00+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import BaseModel, Field


class Type(Enum):
    my_first_object = 'my_first_object'
    my_second_object = 'my_second_object'


class ObjectBase(BaseModel):
    name: Optional[str] = Field(None, description='Name of the object')
    type: Optional[Type] = Field(None, description='Object type')


class CreateObjectRequest(ObjectBase):
    name: str = Field(..., description='Name of the object')
    type: Type = Field(..., description='Object type')


class UpdateObjectRequest(ObjectBase):
    pass


class Demo(BaseModel):
    __root__: Union[ObjectBase, CreateObjectRequest, UpdateObjectRequest] = Field(
        ..., discriminator='type'
    )
