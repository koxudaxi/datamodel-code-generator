# generated by datamodel-codegen:
#   filename:  union.graphql
#   timestamp: 2019-07-26T00:00:00+00:00

from __future__ import annotations

from typing import Optional, TypeAlias, Union

from pydantic import BaseModel, Field
from typing_extensions import Literal

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class IResource(BaseModel):
    id: ID
    typename__: Optional[Literal['IResource']] = Field('IResource', alias='__typename')


class Car(IResource):
    id: ID
    passengerCapacity: Int
    typename__: Optional[Literal['Car']] = Field('Car', alias='__typename')


class Employee(IResource):
    firstName: Optional[String] = None
    id: ID
    lastName: Optional[String] = None
    typename__: Optional[Literal['Employee']] = Field('Employee', alias='__typename')


Resource: TypeAlias = Union[
    'Car',
    'Employee',
]


TechnicalResource: TypeAlias = Car
