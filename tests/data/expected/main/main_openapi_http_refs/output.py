# generated by datamodel-codegen:
#   filename:  https://example.com/refs.yaml
#   timestamp: 2019-07-26T00:00:00+00:00

from __future__ import annotations

from typing import Optional

from pydantic import AnyUrl, BaseModel, Field, conint


class Problem(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='A human readable explanation specific to this occurrence of the\nproblem. You MUST NOT expose internal informations, personal\ndata or implementation details through this field.\n',
        example='Request took too long to complete.',
    )
    instance: Optional[AnyUrl] = Field(
        None,
        description='An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n',
    )
    status: Optional[conint(ge=100, lt=600)] = Field(
        None,
        description='The HTTP status code generated by the origin server for this occurrence\nof the problem.\n',
        example=503,
    )
    title: Optional[str] = Field(
        None,
        description='A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    type: Optional[AnyUrl] = Field(
        'about:blank',
        description='An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
        example='https://tools.ietf.org/html/rfc7231#section-6.6.4',
    )
