[tool.poetry]
name = "datamodel-code-generator"
version = "0.0.0"
description = "Datamodel Code Generator"
authors = ["Koudai Aono <koxudaxi@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/koxudaxi/datamodel-code-generator"
repository = "https://github.com/koxudaxi/datamodel-code-generator"


classifiers = [
        "Development Status :: 4 - Beta",
        "Natural Language :: English",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: Implementation :: CPython"]

[build-system]
requires = ["poetry_core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?$"

[tool.poetry-dynamic-versioning.substitution]
files = ["*/version.py"]
patterns = ["(^version: str = ')[^']*(')"]


[tool.poetry.scripts]
datamodel-codegen = "datamodel_code_generator.__main__:main"

[tool.poetry.dependencies]
python = "^3.6.1"
pydantic =  [{extras = ["email"], version = ">=1.5.1,<2.0", python = "<3.10"}, {extras = ["email"], version = ">=1.9.0,<2.0", python = ">=3.10"}, ]
argcomplete = ">=1.10,<3.0"
prance = ">=0.18.2,<1.0"
openapi-spec-validator = ">=0.2.8,<0.4"
jinja2 = ">=2.10.1,<4.0"
inflect = ">=4.1.0,<6.0"
black = ">=19.10b0"
isort = ">=4.3.21,<6.0"
PySnooper = ">=0.4.1,<1.0.0"
toml = ">=0.10.0,<1.0.0"
genson = ">=1.2.1,<2.0"
httpx = { version = "*", optional = true }
typed-ast = [{version = ">=1.5.0", python = ">=3.9.8"}, {version = ">=1.4.2", python = "<3.9.8"}, ]

[tool.poetry.dev-dependencies]
pytest = ">6.0"
pytest-benchmark = "*"
pytest-cov = ">=2.12.1"
pytest-mock = "*"
mypy = { git = "https://github.com/koxudaxi/mypy.git", branch = "release-0.910-typed-ast-2"}
isort = "==5.6.4"
black = "==20.8b0"
freezegun = "*"
types-Jinja2 = "*"
types-PyYAML = "*"
types-toml = "*"
pydantic =  [{version = ">=1.8.2,<2.0", python = "<3.10"}, {version = ">=1.9.0,<2.0", python = ">=3.10"}, ]
httpx = "*"


[tool.poetry.extras]
http = ["httpx"]

[tool.black]
line-length = 88
skip-string-normalization = true
exclude = '(tests/data|\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist|.*\/models\.py.*|.*\/models\/.*)'

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
skip = "tests/data"

[tool.mypy]
plugins = "pydantic.mypy"

ignore_missing_imports = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = false
warn_untyped_fields = true

[tool.pytest.ini_options]
filterwarnings = "ignore::DeprecationWarning:distutils"
norecursedirs = "tests/data/*"

[tool.coverage.run]
source = ["datamodel_code_generator"]
branch = true

[tool.coverage.report]
ignore_errors = true
exclude_lines = [
    "if self.debug:",
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if not TYPE_CHECKING:"]

omit = ["tests/*"]


[tool.pydantic-pycharm-plugin]
ignore-init-method-arguments = true

[tool.pydantic-pycharm-plugin.parsable-types]
# str field may parse int and float
str = ["int", "float"]
