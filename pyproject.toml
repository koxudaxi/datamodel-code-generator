[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs>=0.4",
  "hatchling>=1.25",
]

[project]
name = "datamodel-code-generator"
description = "Datamodel Code Generator"
readme.content-type = "text/markdown"
readme.file = "README.md"
license = "MIT"
authors = [ { name = "Koudai Aono", email = "koxudaxi@gmail.com" } ]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]
dynamic = [
  "version",
]

dependencies = [
  "argcomplete>=2.10.1,<4",
  "black>=19.10b0",
  "genson>=1.2.1,<2",
  "graphql-core>=3.2.3",
  "httpx>=0.24.1",
  "inflect>=4.1,<6",
  "isort>=4.3.21,<6",
  "jinja2>=2.10.1,<4",
  "openapi-spec-validator>=0.2.8,<0.7",
  "packaging",
  "prance>=0.18.2",
  "pydantic>=1.10",
  "pysnooper>=0.4.1,<2",
  "pyyaml>=6.0.1",
  "tomli>=2.2.1,<3; python_version<='3.11'",
]
optional-dependencies.debug = [ "pysnooper" ]
optional-dependencies.graphql = [ "graphql-core" ]
optional-dependencies.http = [ "httpx" ]
optional-dependencies.validation = [ "openapi-spec-validator", "prance" ]
urls.Homepage = "https://github.com/koxudaxi/datamodel-code-generator"
urls.Source = "https://github.com/koxudaxi/datamodel-code-generator"
scripts.datamodel-codegen = "datamodel_code_generator.__main__:main"

[dependency-groups]
dev = [
  { include-group = "docs" },
  { include-group = "lint" },
  { include-group = "test" },
  { include-group = "type" },
]
test = [
  "freezegun",
  "pytest>=6.1",
  "pytest>=8.3.4",
  "pytest-benchmark",
  "pytest-codspeed>=2.2",
  "pytest-cov>=2.12.1",
  "pytest-cov>=5",
  "pytest-mock>=3.14",
  "pytest-xdist>=3.3.1",
]
type = [
  "mypy>=1.4.1,<1.5",
  "types-jinja2",
  "types-pyyaml",
  "types-setuptools>=67.6.0.5,<70",
  "types-toml",
  { include-group = "test" },
]
docs = [
  "mkdocs==1.6",
  "mkdocs-material==9.5.31",
]
lint = [ "black>=23.3,<25", "pre-commit", "ruff>=0.0.290,<0.7.5", "ruff-lsp>=0.0.39,<0.0.60" ]

[tool.hatch]
build.dev-mode-dirs = [ "src" ]
build.targets.sdist.include = [
  "/datamodel_code_generator",
  "/tests",
]
version.source = "vcs"

[tool.ruff]
line-length = 88
extend-exclude = [ "tests/data" ]
format.indent-style = "space"
format.quote-style = "single"
format.line-ending = "auto"
format.skip-magic-trailing-comma = false
lint.extend-select = [ "C4", "I", "Q", "RUF100", "UP" ]
lint.ignore = [ "E501", "Q000", "Q003", "UP006", "UP007" ]
lint.flake8-quotes = { inline-quotes = 'single', multiline-quotes = 'double' }

[tool.codespell]
skip = '.git,*.lock,tests'

[tool.pytest.ini_options]
filterwarnings = "ignore::DeprecationWarning:distutils"
norecursedirs = "tests/data/*"

[tool.coverage]
run.source = [ "datamodel_code_generator" ]
run.branch = true
run.omit = [ "scripts/*" ]
report.ignore_errors = true
report.exclude_lines = [
  "if self.debug:",
  "pragma: no cover",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if not TYPE_CHECKING:",
]
report.omit = [ "tests/*" ]

[tool.mypy]
plugins = "pydantic.mypy"
ignore_missing_imports = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = false
warn_untyped_fields = true

[tool.pydantic-pycharm-plugin]
ignore-init-method-arguments = true
parsable-types.str = [ "int", "float" ]
