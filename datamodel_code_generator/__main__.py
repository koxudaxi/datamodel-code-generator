#! /usr/bin/env python

"""
Main function.
"""

import os
import sys
from argparse import ArgumentParser, FileType, Namespace
from datetime import datetime, timezone
from enum import IntEnum
from typing import Optional, Sequence, Union

import argcomplete
from datamodel_code_generator.model.pydantic import (
    BaseModel,
    CustomRootType,
    dump_resolve_reference_action,
)
from datamodel_code_generator.parser.openapi import OpenAPIParser


class Exit(IntEnum):
    """Exit reasons."""

    OK = 0
    ERROR = 1


arg_parser = ArgumentParser()
arg_parser.add_argument(
    '--input',
    help='Open API YAML file (default: stdin)',
    type=FileType('rt'),
    default=sys.stdin,
)
arg_parser.add_argument(
    '--output',
    help='Output file (default: stdout)',
    type=FileType('wt'),
    default=sys.stdout,
)
arg_parser.add_argument(
    '--base-class',
    help='Base Class (default: pydantic.BaseModel)',
    type=str,
    default='pydantic.BaseModel',
)
arg_parser.add_argument(
    '--target-python-version',
    help='target python version (default: 3.7)',
    choices=['3.6', '3.7'],
    default='3.7',
)


def main(args: Optional[Sequence[str]] = None) -> Exit:
    """Main function."""

    # add cli completion support
    argcomplete.autocomplete(arg_parser)

    if args is None:
        args = sys.argv[1:]

    namespace: Namespace = arg_parser.parse_args(args)

    parser = OpenAPIParser(
        BaseModel,
        CustomRootType,
        base_class=namespace.base_class,
        target_python_version=namespace.target_python_version,
        text=namespace.input.read(),
        dump_resolve_reference_action=dump_resolve_reference_action,
    )
    body = parser.parse()

    timestamp = datetime.now(timezone.utc).replace(microsecond=0).isoformat()
    header = f'''\
# generated by datamodel-codegen:
#   filename:  {os.path.split(namespace.input.name)[1]}
#   timestamp: {timestamp}
'''
    with namespace.output as file:
        print(header, file=file)
        print(body, file=file)
    return Exit.OK


if __name__ == '__main__':
    sys.exit(main())
