[tox]
requires =
    tox>=4.24.1
    tox-uv>=1.23
env_list =
    fix
    3.13
    3.12
    3.11
    3.10
    3.9
    3.8
    readme
    coverage
    py3.12-black{24, 23, 22}
    py3.9-{black19}
    py3.8-{pydantic18, isort4}
    pkg_meta
skip_missing_interpreters = true

[testenv]
runner = uv-venv-lock-runner
description = run the unit tests with pytest under {base_python}
package = wheel
wheel_build_env = .pkg
extras =
    all
pass_env =
    DIFF_AGAINST
    HTTP_IGNORE_TLS
    PYTEST_*
set_env =
    COVERAGE_FILE = {work_dir}/.coverage.{env_name}
commands =
    pytest {posargs: \
      -p no:codspeed --benchmark-disable \
      --cov {env_site_packages_dir}{/}datamodel_code_generator --cov {tox_root}{/}tests \
      --cov-config=pyproject.toml --no-cov-on-fail --cov-report term-missing:skip-covered \
      --cov-report html:{env_tmp_dir}{/}htmlcov \
      --cov-report xml:{env:COVERAGE_XML:{work_dir}{/}coverage.{env_name}.xml} \
      --junitxml {work_dir}{/}junit.{env_name}.xml \
      tests}
    diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} {env:COVERAGE_XML:{work_dir}{/}coverage.{env_name}.xml}
dependency_groups =
    test
    black24: black24
    black23: black23
    black22: black22
    black19: black19-pydantic18
    isort4: isort4-pydantic15
    black24: black24
    pydantic18: pydantic18

[testenv:fix]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
skip_install = true
commands =
    pre-commit run --all-files --show-diff-on-failure
dependency_groups = fix

[testenv:readme]
description = Update help in readme
commands =
    python scripts/update_command_help_on_markdown.py {posargs:--validate}
dependency_groups =
no_default_groups = true

[testenv:coverage]
description = combine coverage files and generate diff (against DIFF_AGAINST defaulting to origin/main)
skip_install = true
extras =
parallel_show_output = true
pass_env =
    DIFF_AGAINST
set_env =
    COVERAGE_FILE = {work_dir}/.coverage
commands =
    coverage combine
    coverage report --skip-covered --show-missing
    coverage xml -o {work_dir}/coverage.xml
    coverage html -d {work_dir}/htmlcov
    diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} {work_dir}/coverage.xml
depends =
    3.13
    3.12
    3.11
    3.10
    3.9
    3.8
    py3.12-black{24, 23, 22}
    py3.9-{black19}
    py3.8-{pydantic18, isort4}
dependency_groups = coverage

[testenv:pkg_meta]
description = check that the long description is valid
skip_install = true
commands =
    uv build --sdist --wheel --out-dir {env_tmp_dir} .
    twine check {env_tmp_dir}{/}*
    check-wheel-contents --no-config {env_tmp_dir}
dependency_groups = pkg-meta

[testenv:type]
description = run type check on code base
commands =
    pyright src
dependency_groups = type

[testenv:docs]
description = generate documentation
extras =
commands =
    mkdocs build --verbose --clean --strict -d {posargs:{env_tmp_dir}}
    python -c 'print("Documentation generated at file://{posargs:{env_tmp_dir}}{/}index.html")'
dependency_groups = docs

[testenv:dev]
description = generate a DEV environment
package = editable
commands =
    uv pip tree
    python -c 'import sys; print(sys.executable)'
dependency_groups = dev

[testenv:lock]
runner = uv-venv-runner
description = refresh requirement files
skip_install = true
commands =
    uv lock --refresh --upgrade
dependency_groups =
